// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum GradeType {
  EXAM
  ASSIGNMENT
  QUIZ
  PROJECT
  HOMEWORK
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  logo        String?
  established DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  students    Student[]
  teachers    Teacher[]
  parents     Parent[]
  classes     Class[]
  subjects    Subject[]
  grades      Grade[]
  attendance  Attendance[]
  invoices    Invoice[]
  academicYears AcademicYear[]

  @@map("schools")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  role          UserRole  @default(STUDENT)
  schoolId      String?   @map("school_id")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  school   School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  accounts Account[]
  sessions Session[]
  student  Student?
  teacher  Teacher?
  parent   Parent?

  @@map("users")
}

model AcademicYear {
  id        String   @id @default(cuid())
  name      String   // e.g., "2024-2025"
  startDate DateTime
  endDate   DateTime
  current   Boolean  @default(false)
  schoolId  String   @map("school_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school     School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classes    Class[]
  grades     Grade[]
  attendance Attendance[]

  @@map("academic_years")
}

model Student {
  id           String    @id @default(cuid())
  userId       String    @unique @map("user_id")
  schoolId     String    @map("school_id")
  studentId    String    @unique @map("student_id") // Custom student ID
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  dateOfBirth  DateTime  @map("date_of_birth")
  gender       Gender
  address      String?
  phone        String?
  emergencyContact String? @map("emergency_contact")
  enrollmentDate DateTime @default(now()) @map("enrollment_date")
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  school     School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class      Class?       @relation(fields: [classId], references: [id])
  classId    String?      @map("class_id")
  parents    ParentStudent[]
  grades     Grade[]
  attendance Attendance[]
  invoices   Invoice[]

  @@map("students")
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  schoolId    String   @map("school_id")
  teacherId   String   @unique @map("teacher_id") // Custom teacher ID
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  dateOfBirth DateTime @map("date_of_birth")
  gender      Gender
  address     String?
  phone       String?
  qualification String?
  hireDate    DateTime @default(now()) @map("hire_date")
  salary      Float?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  school     School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjects   TeacherSubject[]
  classes    Class[]
  grades     Grade[]
  attendance Attendance[]

  @@map("teachers")
}

model Parent {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  schoolId    String   @map("school_id")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  phone       String?
  address     String?
  occupation  String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  school   School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  children ParentStudent[]
  invoices Invoice[]

  @@map("parents")
}

model ParentStudent {
  id        String @id @default(cuid())
  parentId  String @map("parent_id")
  studentId String @map("student_id")
  relationship String // "father", "mother", "guardian", etc.

  // Relations
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_students")
}

model Class {
  id             String @id @default(cuid())
  name           String
  grade          String // "Grade 1", "Grade 2", etc.
  section        String // "A", "B", "C", etc.
  capacity       Int    @default(30)
  schoolId       String @map("school_id")
  teacherId      String @map("teacher_id") // Class teacher
  academicYearId String @map("academic_year_id")
  active         Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  students     Student[]
  subjects     ClassSubject[]
  grades       Grade[]
  attendance   Attendance[]

  @@unique([name, grade, section, schoolId, academicYearId])
  @@map("classes")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  schoolId    String   @map("school_id")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school   School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teachers TeacherSubject[]
  classes  ClassSubject[]
  grades   Grade[]

  @@map("subjects")
}

model TeacherSubject {
  id        String @id @default(cuid())
  teacherId String @map("teacher_id")
  subjectId String @map("subject_id")

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model ClassSubject {
  id        String @id @default(cuid())
  classId   String @map("class_id")
  subjectId String @map("subject_id")

  // Relations
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
  @@map("class_subjects")
}

model Grade {
  id             String    @id @default(cuid())
  studentId      String    @map("student_id")
  subjectId      String    @map("subject_id")
  classId        String    @map("class_id")
  teacherId      String    @map("teacher_id")
  academicYearId String    @map("academic_year_id")
  schoolId       String    @map("school_id")
  type           GradeType
  name           String    // "Midterm Exam", "Assignment 1", etc.
  score          Float
  maxScore       Float
  percentage     Float
  grade          String?   // "A", "B", "C", etc.
  remarks        String?
  date           DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject      Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher      Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model Attendance {
  id             String           @id @default(cuid())
  studentId      String           @map("student_id")
  classId        String           @map("class_id")
  teacherId      String           @map("teacher_id")
  academicYearId String           @map("academic_year_id")
  schoolId       String           @map("school_id")
  date           DateTime
  status         AttendanceStatus
  remarks        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher      Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("attendance")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique @map("invoice_number")
  studentId   String        @map("student_id")
  parentId    String?       @map("parent_id")
  schoolId    String        @map("school_id")
  title       String
  description String?
  amount      Float
  dueDate     DateTime      @map("due_date")
  paidDate    DateTime?     @map("paid_date")
  status      InvoiceStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent? @relation(fields: [parentId], references: [id])
  school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("invoices")
}
